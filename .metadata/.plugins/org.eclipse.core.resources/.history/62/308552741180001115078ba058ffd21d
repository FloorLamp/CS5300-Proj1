package session;

import groupMembership.HttpServletRequest;
import groupMembership.HttpServletResponse;
import groupMembership.Server;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Timer;
import java.util.UUID;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import javax.servlet.http.*;


@WebServlet("/SessionManager")
public class SessionManager {
	private static final long expiration = 5000;
	private static final String cookiename = "CS5300PROJECT1SESSION";	
	private static final Integer sessionTimeout = 600; // Timeout time in seconds
	// of session
	protected static final Integer sessionCleanerFrequency = 60; // Delay in
	// seconds for
	// running cleaner

	// Locks for session table
	protected static final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
	protected static final Lock readlock = rwl.readLock();
	protected static final Lock writelock = rwl.writeLock();
	protected static final Hashtable<String, Session> sessions = new Hashtable<String, Session>();

	// Sweeper for session cleanup
	protected static final SessionCleaner sessionCleaner = new SessionCleaner();
	protected static final Timer sessionCleanerTimer = new Timer();

	public static Session getAndIncrement(HttpServletRequest request, Server s) {
		long date = System.currentTimeMillis();
		Cookie[] cookies = request.getCookies();
		Cookie cookie = null;
		Session session;
		if (cookies != null) {
			for (int i = 0; i < cookies.length; i++) {
				Cookie c = cookies[i];
				if (c.getName().equals(cookiename)) {
					cookie = c;
				}
			}
		}
		if (cookie == null) {
			session = new Session(s,new Integer(0),"",expiration+date);
		} else {
			session = s.getHash().get(cookie.getValue());
			// If we are unable to get session
			if (session == null) {
				session = new Session(s,new Integer(0),"",expiration+date);
			} else {
				session.setChangecount(session.getChangecount()+1);
			}
		}
		return session;
	}

	public static void putCookie(HttpServletResponse response, Server s, String i) {
		Cookie cookie = new Cookie(cookiename, s.toString(i));
		cookie.setMaxAge(600);
		response.addCookie(cookie);
	}

	public static void destroyCookie(HttpServletRequest request,
			HttpServletResponse response, Server s, Session session, String i) {
		Cookie[] cookies = request.getCookies();
		Cookie cookie = null;
		if (cookies != null) {
			for (int i = 0; i < cookies.length; i++) {
				Cookie c = cookies[i];
				if (c.getName().equals(cookiename)) {
					cookie = c;
				}
			}
		}
		if (cookie != null) {
			cookie = new Cookie(cookiename, s.toString(i));
			cookie.setMaxAge(0);
			response.addCookie(cookie);
		}
	}

	/**
	 * Start session cleaner
	 */
	public static void startCleaner() {
		sessionCleanerTimer.schedule(sessionCleaner,
				sessionCleanerFrequency * 1000, sessionCleanerFrequency * 1000);
	}

	/**
	 * Cleanup loose threads Call this when stopping sessions
	 */
	public static void cleanup() {
		sessionCleanerTimer.cancel();
	}

	/**
	 * Create a new session
	 */
	private static Session initialize() {
		String uuid = UUID.randomUUID().toString();
		Session s = new Session(uuid, GroupMembership.getServers());
		/*
    writelock.lock();
    try {
      sessions.put(uuid, s);
    } finally {
      writelock.unlock();
    }*/
		return s;
	}

	/**
	 * Find session from a given cookie string Returns null if unable to be found
	 * or version numbers are incorrect
	 */
	private static Session getSessionFromCookie(String cookie) {
		Gson gson = new Gson();
		String[] cookie_params;
		try {
			cookie_params = gson.fromJson(URLDecoder.decode(cookie, "UTF-8"),
					String[].class);
			if ((cookie_params == null) || (cookie_params.length < 3)) {
				return null;
			} else {
				String[] locs = cookie_params[2].split(",");
				List<Server> servers = new ArrayList<Server>();
				for(String l : locs) {
					String[] parts = l.split(":");
					servers.add(new Server(parts[0],parts[1]));
				}
				Session s = SessionManager.getSessionById(cookie_params[0], cookie_params[1]);
				if (s != null){
					s.setLocations(servers);

					return s;
				}
				s = new Session(cookie_params[0], servers);
				s.setVersion(Integer.valueOf(cookie_params[1]));
				Session session = RPCClient.get(s);
				if (session == null) {
					return null;
				} else {
					// Check to see if the versions match
					if (session.getVersion().equals(cookie_params[1])) {
						return session;
					} else {
						return null;
					}
				}
				/*
        readlock.lock();
        try {
          Session session = sessions.get(cookie_params[0]);
          if (session == null) {
            return null;
          } else {
            // Check to see if the versions match
            if (session.getVersion().equals(cookie_params[1])) {
              return session;
            } else {
              return null;
            }
          }
        } finally {
          readlock.unlock();
        }
				 */
			}
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Used in SSM Brick
	 * 
	 * @param sessionID
	 * @param version
	 * @return
	 */
	public static Session getSessionById(String sessionID, String version) {
		System.out.println("Server trying to retrieve: " + sessionID + "," + version);
		readlock.lock();
		try {
			Session session = sessions.get(sessionID);
			if (session == null) {
				System.out.println("server doesn't have session");
				return null;
			} else {
				// Check to see if the versions match
				if (session.getVersion().equals(version)) {
					return session;
				} else {
					System.out.println(session.getVersion() + " does not match with " + version);
					return null;
				}
			}
		} finally {
			readlock.unlock();
		}
	}

	/**
	 * Used in SSM Brick
	 * 
	 * @param sessionid
	 * @param version
	 * @param count
	 * @param message
	 */
	public static void putSession(Server s, String sessionid, String version, String count,
			String message) {
		long date = System.currentTimeMillis();
		System.out.println("server adding session: " + sessionid +"," + version);
		writelock.lock();
		Session session = s.getHash().get(sessionid);
		if (session == null) {
			session = new Session(sessionid, null);
			sessions.put(sessionid, session);
		}
		session.setData("count", count);
		session.setVersion(Integer.valueOf(version));
		session.setData("message", message);
		session.updateTimestamp();
		writelock.unlock();
	}
}
